{"/blog/cuda_in_conda_env/":{"data":{"":"","可选安装tensorrt#（可选）安装TensorRT":" pip3 install --upgrade tensorrt echo \"export LD_LIBRARY_PATH=$CONDA_PREFIX/lib/python3.12/site-packages/tensorrt_libs:\\$LD_LIBRARY_PATH\" \u003e\u003e $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh ","在conda环境内安装cuda-toolkit#在conda环境内安装cuda-toolkit":" conda install nvidia/label/cuda-12.4.1::cuda-toolkit -y conda install nvidia/label/cuda-12.4.1::cuda-nvcc -y conda install cudnn cuda-version=12.4 -c nvidia -y conda install nvidia/label/cuda-12.4.1::cuda-cudart -y conda install nvidia/label/cuda-12.4.1::libcublas -y conda install nvidia/label/cuda-12.4.1::libnpp -y conda install nvidia/label/cuda-12.4.1::cuda-opencl -y conda install nvidia/label/cuda-12.4.1::libcufft -y conda install nvidia/label/cuda-12.4.1::libcusparse -y conda install nvidia/label/cuda-12.4.1::libcusolver -y # 自动设置环境变量 mkdir -p $CONDA_PREFIX/etc/conda/activate.d echo \"export PATH=$CONDA_PREFIX/bin:\\$PATH\" \u003e\u003e $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh echo \"export LD_LIBRARY_PATH=$CONDA_PREFIX/lib:\\$LD_LIBRARY_PATH\" \u003e\u003e $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh echo \"export LD_LIBRARY_PATH=$CONDA_PREFIX/lib64:\\$LD_LIBRARY_PATH\" \u003e\u003e $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh echo \"export CUDA_HOME=$CONDA_PREFIX\" \u003e\u003e $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh 安装torch # 对应cuda版本 pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124 # https://pytorch.org/get-started/previous-versions/ 使用镜像\n# 编辑指定torch和cuda版本 pip3 install torch==2.6.0 torchvision torchaudio -f https://mirrors.aliyun.com/pytorch-wheels/cu124/ ","安装miniconda#安装miniconda":"安装miniconda mkdir -p ~/miniconda3 wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3 rm ~/miniconda3/miniconda.sh source ~/miniconda3/bin/activate conda init --all ","验证#验证":" nvcc -V "},"title":"在conda环境下安装和管理CUDA版本"},"/blog/opencv_cuda/":{"data":{"":"","problems#PROBLEMS":"缺少libcuda* 文件 ln -sf /usr/lib/x86_64-linux-gnu/libcuda* $CONDA_PREFIX/lib/ 缺少libstdc++.so.6 ln -sf /usr/lib64/libstdc++.so.6 /home/hjk/miniconda3/lib/libstdc++.so.6 import时出现hdf相关so文件未找到 添加编译参数\n-D BUILD_opencv_hdf=OFF 其他可能解决方案 conda install libarchive ","在conda环境下安装依赖#在conda环境下安装依赖":"在conda环境下安装依赖 CUDA 参考 https://blog.bocchi.icu/blog/cuda_in_conda_env/\n编译环境和图像处理库 conda install -c conda-forge cmake pkg-config -y #需要指定版本，编译时可能需要 conda install -c conda-forge gcc=11.4.0 gxx=11.4.0 gcc_linux-64=11.4.0 gxx_linux-64=11.4.0 -y conda install -c conda-forge numpy -y conda install -c conda-forge libjpeg-turbo libpng libtiff libwebp libavif -y conda install -c conda-forge eigen ffmpeg libgl ocl-icd-system -y conda install -c conda-forge hdf5 openblas lapack -y conda install -c conda-forge tbb vtk tesseract -y conda install -c conda-forge matplotlib scipy scikit-learn scikit-image -y conda install -c conda-forge libstdcxx-ng libgcc-ng libarchive -y conda install -c conda-forge gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav -y conda install -c conda-forge libgfortran ncurses -y conda install -c conda-forge x264 x265 jasper openexr -y conda install -c conda-forge qt -y #需要指定版本，编译时可能需要 conda install -c conda-forge libgfortran=3 -y ","编译#编译":" # 拉取源码 git clone https://github.com/opencv/opencv_contrib.git git clone https://github.com/opencv/opencv.git # checkout特定版本，上述参数测试可用于4.8.1 cd opencv \u0026\u0026 git checkout 4.8.1 \u0026\u0026 cd .. cd opencv_contrib \u0026\u0026 git checkout 4.8.1 \u0026\u0026 cd .. # （可选）使用编解码硬件加速需要 cp Video_Codec_SDK_13.0.19/Interface/* $CONDA_PREFIX/include/ cp Video_Codec_SDK_13.0.19/Lib/linux/stubs/x86_64/* $CONDA_PREFIX/lib/ # 创建输出目录 mkdir build \u0026\u0026 cd build 编译指令 # 配置编译参数 cmake .. \\ -D CMAKE_BUILD_TYPE=RELEASE \\ -D CMAKE_INSTALL_PREFIX=$CONDA_PREFIX \\ -D CMAKE_INSTALL_RPATH=$CONDA_PREFIX/lib \\ -D CMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \\ -D CMAKE_SKIP_RPATH=OFF \\ -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \\ -D WITH_CUDA=ON \\ -D CUDA_ARCH_BIN=\"8.9\" \\ -D CUDA_HOST_COMPILER=$(which gcc) \\ -D CMAKE_CUDA_COMPILER=$(which nvcc) \\ -D CUDA_TOOLKIT_ROOT_DIR=$CONDA_PREFIX \\ -D WITH_CUDNN=ON \\ -D OPENCV_DNN_CUDA=ON \\ -D ENABLE_FAST_MATH=ON \\ -D CUDA_FAST_MATH=ON \\ -D WITH_CUBLAS=ON \\ -D BUILD_opencv_python3=ON \\ -D PYTHON3_EXECUTABLE=$CONDA_PREFIX/bin/python \\ -D PYTHON3_INCLUDE_DIR=$CONDA_PREFIX/include/python3.12 \\ -D PYTHON3_LIBRARY=$CONDA_PREFIX/lib/libpython3.12.so \\ -D PYTHON3_NUMPY_INCLUDE_DIRS=$CONDA_PREFIX/lib/python3.12/site-packages/numpy/_core/include \\ -D PYTHON3_PACKAGES_PATH=$CONDA_PREFIX/lib/python3.12/site-packages \\ -D WITH_GSTREAMER=ON \\ -D WITH_FFMPEG=ON \\ -D BUILD_opencv_python2=OFF \\ -D BUILD_TESTS=OFF \\ -D BUILD_PERF_TESTS=OFF \\ -D ENABLE_CCACHE=OFF \\ -D ENABLE_CUDA_FIRST_CLASS_LANGUAGE=ON \\ # 编译安装 # 根据cpu核心数调整参数 make -j 12 # 安装 make install ","验证安装#验证安装":" import cv2 print(cv2.__version__) print(cv2.cuda.getCudaEnabledDeviceCount()) "},"title":"编译支持CUDA加速的opencv"},"/blog/vnc/":{"data":{"":"","在debian-xfce4桌面配置#在debian xfce4桌面配置":"安装tight vnc\nsudo apt install tigervnc-standalone-server tigervnc-xorg-extension 安装xfce4\nsudo apt install xfce4 xfce4-goodies ~/.vnc/xstartup文件内容：\n#!/bin/sh # Unset environment variables to prevent conflicts unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS # Start the XFCE session manager directly # The 'exec' command replaces the shell process with xfce4-session exec xfce4-session 运行vncpasswd以配置当前用户的vnc登陆密码\n不需要复制service模版，在/etc/tigervnc/vncserver.users中配置用户后直接启动服务 注意服务名称不同\nsudo systemctl daemon-reload # 设置开机自启，:1对应特定用户分配的端口 sudo systemctl enable tigervncserver@:1.service # 立即启动 sudo systemctl start tigervncserver@:1.service # 检查 sudo systemctl status tigervncserver@:1.service 防火墙：\n# 对应端口，:2就是5902 sudo ufw allow 5901/tcp ","在fedora-42上安装配置多用户vnc桌面#在fedora 42上安装配置多用户vnc桌面":"基本配置 # 安装tight vnc server sudo dnf install tigervnc-server tigervnc-server-module -y 编辑用户使用的端口 sudo nano /etc/tigervnc/vncserver.users，文件内容如：\n:2=andrew :3=lisa 表示andrew的vnc连接端口为5902，lisa为5903，自行配置用户分配\n配置vnc启动脚本，在对应用户下编辑~/.vnc/xstartup 对于xfce4桌面环境：\n#!/bin/sh # export LIBGL_ALWAYS_SOFTWARE=1 unset SESSION_MANAGER unset DBUS_SESSION_BUS_ADDRESS exec xfce4-session 执行sudo chmod +x ~/.vnc/xstartup授予执行权限 运行vncpasswd以配置当前用户的vnc登陆密码\n系统服务文件 复制service文件模版\nsudo cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@.service 开启系统服务\nsudo systemctl daemon-reload # 设置开机自启，:1对应特定用户分配的端口 sudo systemctl enable vncserver@:1.service # 立即启动 sudo systemctl start vncserver@:1.service # 检查 sudo systemctl status vncserver@:1.service 开启对应端口防火墙 sudo firewall-cmd --add-port=5902/tcp --permanent ","在ubuntu-gnome桌面配置#在ubuntu gnome桌面配置":"安装tight vnc\nsudo apt install tigervnc-standalone-server tigervnc-xorg-extension ~/.vnc/xstartup文件内容：\n#!/bin/sh # 清除会话管理器环境变量（避免冲突） unset SESSION_MANAGER # 清除 D-Bus 会话总线地址（避免与系统默认冲突） unset DBUS_SESSION_BUS_ADDRESS # 设置 GNOME Shell 会话模式为 Ubuntu export GNOME_SHELL_SESSION_MODE=ubuntu # 设置当前桌面环境为 Ubuntu + GNOME export XDG_CURRENT_DESKTOP=ubuntu:GNOME # 设置 XDG 配置目录，优先使用 Ubuntu 的配置路径 export XDG_CONFIG_DIRS=/etc/xdg/xdg-ubuntu:/etc/xdg # 启动 GNOME 会话（核心命令） exec gnome-session 配置sudo nano /etc/tigervnc/vncserver-config-defaults 设置$localhost = \"no\";以允许远程连接"},"title":"Linux下安装和配置VNC多用户访问"},"/docs/":{"data":{"":"Here you can find various technical documents, configuration guides, and reference materials.","categories#Categories":" Development Setup - Installation and configuration of development tools Technical Docs - In-depth technical explanations Reference - Common commands and configuration samples Troubleshooting - Solutions to common problems Browse the navigation on the left for details."},"title":"Docs"}}