{"/docs/":{"data":{"":"Here you can find various technical documents, configuration guides, and reference materials.","categories#Categories":" Development Setup - Installation and configuration of development tools Technical Docs - In-depth technical explanations Reference - Common commands and configuration samples Troubleshooting - Solutions to common problems Browse the navigation on the left for details."},"title":"Docs"},"/posts/":{"data":{"":"Welcome to my blog! Here you’ll find my tech journey, programming experiences, and various notes.\nMain topics include:\nDevelopment setup Technical solutions Learning notes Tool guides "},"title":"Blog Posts"},"/posts/cuda_in_conda_env/":{"data":{"可选安装tensorrt#（可选）安装TensorRT":" pip3 install --upgrade tensorrt echo \"export LD_LIBRARY_PATH=$CONDA_PREFIX/lib/python3.12/site-packages/tensorrt_libs:\\$LD_LIBRARY_PATH\" \u003e\u003e $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh ","在conda环境内安装cuda-toolkit#在conda环境内安装cuda-toolkit":" conda install nvidia/label/cuda-12.4.1::cuda-toolkit -y conda install nvidia/label/cuda-12.4.1::cuda-nvcc -y conda install cudnn cuda-version=12.4 -c nvidia -y conda install nvidia/label/cuda-12.4.1::cuda-cudart -y conda install nvidia/label/cuda-12.4.1::libcublas -y conda install nvidia/label/cuda-12.4.1::libnpp -y conda install nvidia/label/cuda-12.4.1::cuda-opencl -y conda install nvidia/label/cuda-12.4.1::libcufft -y # 自动设置环境变量 mkdir -p $CONDA_PREFIX/etc/conda/activate.d echo \"export PATH=$CONDA_PREFIX/bin:\\$PATH\" \u003e\u003e $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh echo \"export LD_LIBRARY_PATH=$CONDA_PREFIX/lib:\\$LD_LIBRARY_PATH\" \u003e\u003e $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh echo \"export CUDA_HOME=$CONDA_PREFIX\" \u003e\u003e $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh # 对应cuda版本 pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124 # https://pytorch.org/get-started/previous-versions/ ","安装miniconda#安装miniconda":"安装miniconda mkdir -p ~/miniconda3 wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3 rm ~/miniconda3/miniconda.sh source ~/miniconda3/bin/activate conda init --all ","验证#验证":" nvcc -V "},"title":"在conda环境下安装和管理CUDA版本"},"/posts/hugo_mathjax/":{"data":{"step1#step1":"step1启用并配置 Goldmark passthrough 扩展，在站点配置文件\nmarkup: goldmark: extensions: passthrough: delimiters: block: - - \\[ - \\] - - $$ - $$ inline: - - \\( - \\) enable: true params: math: true 作用是：\n定义block和inline两种类型的标记，使用配置的标记将公式包括进去，允许自己选择，允许不配置block或者inline 添加了一个params，在之后会使用 ","step2#step2":"在themes目录下你的主题中添加 layouts/_partials/math.html 文件\n\u003cscript id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js\"\u003e\u003c/script\u003e \u003cscript\u003e MathJax = { tex: { displayMath: [['\\\\[', '\\\\]'], ['$$', '$$']], // block inlineMath: [['\\\\(', '\\\\)']] // inline }, loader:{ load: ['ui/safe'] }, }; \u003c/script\u003e 符号需要和step1的配置匹配","step3#step3":"根据参数条件调用partial template，PaperMod的位置在 themes/PaperMod/layouts/_default/baseof.html 其他主题搜索 baseof.html 文件\n\u003chead\u003e ... {{ if .Param \"math\" }} {{ partialCached \"math.html\" . }} {{ end }} ... \u003c/head\u003e ","step4#step4":"验证，对应应当如下\nThis is an inline \\(a^*=x-b^*\\) equation. These are block equations: \\[a^*=x-b^*\\] \\[ a^*=x-b^* \\] \\[ a^*=x-b^* \\] These are also block equations: $$a^*=x-b^*$$ $$ a^*=x-b^* $$ $$ a^*=x-b^* $$ OUTPUT\nThis is an inline a∗=x−b∗a^*=x-b^*a∗=x−b∗ equation.\nThese are block equations:\na∗=x−b∗a^*=x-b^*a∗=x−b∗a∗=x−b∗ a^*=x-b^* a∗=x−b∗a∗=x−b∗ a^*=x-b^* a∗=x−b∗These are also block equations:\na∗=x−b∗a^*=x-b^*a∗=x−b∗a∗=x−b∗ a^*=x-b^* a∗=x−b∗a∗=x−b∗ a^*=x-b^* a∗=x−b∗","参考#参考：":"https://gohugo.io/content-management/mathematics/"},"title":"在hugo站点中添加mathjax支持"},"/posts/opencv_cuda/":{"data":{"cuda#CUDA":"参考","problems#PROBLEMS":"","其他可能解决方案#其他可能解决方案":" conda install libarchive ","在conda环境下安装依赖#在conda环境下安装依赖":"在conda环境下安装依赖","编译#编译":" # 拉取源码 git clone https://github.com/opencv/opencv_contrib.git git clone https://github.com/opencv/opencv.git # checkout特定版本，上述参数测试可用于4.8.1 cd opencv \u0026\u0026 git checkout 4.8.1 \u0026\u0026 cd .. cd opencv_contrib \u0026\u0026 git checkout 4.8.1 \u0026\u0026 cd .. # （可选）使用编解码硬件加速需要 cp Video_Codec_SDK_13.0.19/Interface/* $CONDA_PREFIX/include/ cp Video_Codec_SDK_13.0.19/Lib/linux/stubs/x86_64/* $CONDA_PREFIX/lib/ # 创建输出目录 mkdir build \u0026\u0026 cd build ","编译指令#编译指令":" # 配置编译参数 cmake .. \\ -D CMAKE_BUILD_TYPE=RELEASE \\ -D CMAKE_INSTALL_PREFIX=$CONDA_PREFIX \\ -D CMAKE_INSTALL_RPATH=$CONDA_PREFIX/lib \\ -D CMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \\ -D CMAKE_SKIP_RPATH=OFF \\ -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \\ -D WITH_CUDA=ON \\ -D CUDA_ARCH_BIN=\"8.9\" \\ -D CUDA_HOST_COMPILER=$(which gcc) \\ -D CMAKE_CUDA_COMPILER=$(which nvcc) \\ -D CUDA_TOOLKIT_ROOT_DIR=$CONDA_PREFIX \\ -D WITH_CUDNN=ON \\ -D OPENCV_DNN_CUDA=ON \\ -D ENABLE_FAST_MATH=ON \\ -D CUDA_FAST_MATH=ON \\ -D WITH_CUBLAS=ON \\ -D BUILD_opencv_python3=ON \\ -D PYTHON3_EXECUTABLE=$CONDA_PREFIX/bin/python \\ -D PYTHON3_INCLUDE_DIR=$CONDA_PREFIX/include/python3.12 \\ -D PYTHON3_LIBRARY=$CONDA_PREFIX/lib/libpython3.12.so \\ -D PYTHON3_NUMPY_INCLUDE_DIRS=$CONDA_PREFIX/lib/python3.12/site-packages/numpy/_core/include \\ -D PYTHON3_PACKAGES_PATH=$CONDA_PREFIX/lib/python3.12/site-packages \\ -D WITH_GSTREAMER=ON \\ -D WITH_FFMPEG=ON \\ -D BUILD_opencv_python2=OFF \\ -D BUILD_TESTS=OFF \\ -D BUILD_PERF_TESTS=OFF \\ -D ENABLE_CCACHE=OFF \\ -D ENABLE_CUDA_FIRST_CLASS_LANGUAGE=ON \\ # 编译安装 # 根据cpu核心数调整参数 make -j 12 # 安装 make install ","编译环境和图像处理库#编译环境和图像处理库":" conda install -c conda-forge cmake pkg-config -y #需要指定版本，编译时可能需要 conda install -c conda-forge gcc=11.4.0 gxx=11.4.0 gcc_linux-64=11.4.0 gxx_linux-64=11.4.0 -y conda install -c conda-forge numpy -y conda install -c conda-forge libjpeg-turbo libpng libtiff libwebp libavif -y conda install -c conda-forge eigen ffmpeg libgl ocl-icd-system -y conda install -c conda-forge hdf5 openblas lapack -y conda install -c conda-forge tbb vtk tesseract -y conda install -c conda-forge matplotlib scipy scikit-learn scikit-image -y conda install -c conda-forge libstdcxx-ng libgcc-ng libarchive -y conda install -c conda-forge gstreamer gst-plugins-base gst-plugins-good gst-plugins-bad gst-plugins-ugly gst-libav -y conda install -c conda-forge libgfortran ncurses -y conda install -c conda-forge x264 x265 jasper openexr -y conda install -c conda-forge qt -y #需要指定版本，编译时可能需要 conda install -c conda-forge libgfortran=3 -y ","缺少libcuda-文件#缺少libcuda* 文件":" ln -sf /usr/lib/x86_64-linux-gnu/libcuda* $CONDA_PREFIX/lib/ ","缺少libstdcso6#缺少libstdc++.so.6":" ln -sf /usr/lib64/libstdc++.so.6 /home/hjk/miniconda3/lib/libstdc++.so.6 ","验证安装#验证安装":" import cv2 print(cv2.__version__) print(cv2.cuda.getCudaEnabledDeviceCount()) "},"title":"编译支持CUDA加速的opencv"}}